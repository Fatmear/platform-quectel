# Copyright 2014-present PlatformIO <contact@platformio.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import platform as plat
import os
from os.path import join, isdir

from platformio.platform.base import PlatformBase
from platformio.platform.board import PlatformBoardConfig
from SCons.Script import (
    DefaultEnvironment,
    Environment,
    Builder
)

env: Environment = DefaultEnvironment()
platform: PlatformBase = env.PioPlatform()
board: PlatformBoardConfig = env.BoardConfig()
FRAMEWORK_DIR = platform.get_package_dir("framework-" + board.get('name').lower() +"-csdk")
assert isdir(FRAMEWORK_DIR)

system = plat.system()

def gen_firmware_bin(source, target, env):
    import os
    import shutil
    last_dir = os.getcwd()
    ql_out_path = join(FRAMEWORK_DIR, "ql_out")
    if os.path.exists(ql_out_path) and os.path.isdir(ql_out_path): 
        shutil.rmtree(ql_out_path)
    os.mkdir(ql_out_path)
    ql_build_path = join(FRAMEWORK_DIR, "ql_build", "gccout")
    if os.path.exists(ql_build_path) and os.path.isdir(ql_build_path): 
        shutil.rmtree(ql_build_path)
    os.mkdir(ql_build_path)
    shutil.copy(str(source[0]), join(ql_build_path, "fgm842d.bin"))
    os.chdir(join(FRAMEWORK_DIR, "ql_tools", "beken_packager"))
    os.system("python bk_packager.py fgm842d")
    os.chdir(ql_out_path)
    if os.path.exists(join(env["PROJECT_BUILD_DIR"], board.get('name'), "fgm842d_uart_2M.1220.bin")):  
        os.remove(join(env["PROJECT_BUILD_DIR"], board.get('name'), "fgm842d_uart_2M.1220.bin"))  
    shutil.move("./fgm842d_uart_2M.1220.bin", join(env["PROJECT_BUILD_DIR"], board.get('name')))
    if os.path.exists(join(env["PROJECT_BUILD_DIR"], board.get('name'), os.path.basename(str(target[0])))):  
        os.remove(join(env["PROJECT_BUILD_DIR"], board.get('name'), os.path.basename(str(target[0]))))  
    shutil.move("./all_2M.1220.bin", join(env["PROJECT_BUILD_DIR"], board.get('name'), os.path.basename(str(target[0]))))
    os.chdir(last_dir)

if system == "Windows":
    gcc_path = join(FRAMEWORK_DIR, "ql_tools", "gcc-arm-none-eabi-5_4-2016q3-20160926-win32")
    if not os.path.exists(gcc_path):
        os.system(join(FRAMEWORK_DIR, "ql_tools", "7z", "7z.exe") + " x " + join(FRAMEWORK_DIR, "ql_tools", "gcc-arm-none-eabi-5_4-2016q3-20160926-win32.zip") + " -o" + gcc_path)

    upload_port = 0
    try:
        if "COM" in env["UPLOAD_PORT"]:
            upload_port = int(env["UPLOAD_PORT"][3:])
    except Exception as e:
        pass

    env.Replace(
        UPLOADER=FRAMEWORK_DIR + "/ql_tools/bk_loader/bk_loader.exe",
        UPLOADERFLAGS=[
            "-p", upload_port,
            "-b", "921600",
            "-i",
        ],
        UPLOADCMD='$UPLOADER download $UPLOADERFLAGS $SOURCE',
    )

    env.Replace(
        AR = join(gcc_path, "bin", "arm-none-eabi-ar.exe"),
        AS = join(gcc_path, "bin", "arm-none-eabi-gcc.exe"),
        CC = join(gcc_path, "bin", "arm-none-eabi-gcc.exe"),
        CXX = join(gcc_path, "bin", "arm-none-eabi-g++.exe"),
        GDB = join(gcc_path, "bin", "arm-none-eabi-gdb.exe"),
        NM = join(gcc_path, "bin", "arm-none-eabi-gcc-nm.exe"),
        LINK = join(gcc_path, "bin", "arm-none-eabi-gcc.exe"),
        OBJCOPY = join(gcc_path, "bin", "arm-none-eabi-objcopy.exe"),
        OBJDUMP = join(gcc_path, "bin", "arm-none-eabi-objdump.exe"),
        RANLIB = join(gcc_path, "bin", "arm-none-eabi-gcc-ranlib.exe"),
        SIZETOOL = join(gcc_path, "bin", "arm-none-eabi-size.exe"),
    )
elif system == "Linux":
    gcc_path = join(FRAMEWORK_DIR, "ql_tools", "gcc-arm-none-eabi-5_4-2016q3")
    if not os.path.exists(gcc_path):
        os.system("tar -xvf " + join(FRAMEWORK_DIR, "ql_tools", "gcc-arm-none-eabi-5_4-2016q3.tar.bz2") + " -C " + join(FRAMEWORK_DIR, "ql_tools"))

    upload_port = 0
    try:
        if "/dev/ttyUSB" in env["UPLOAD_PORT"]:
            upload_port = int(env["UPLOAD_PORT"][11:])
    except Exception as e:
        pass

    env.Replace(
        UPLOADER=FRAMEWORK_DIR + "/ql_tools/bk_loader/bk_loader",
        UPLOADERFLAGS=[
            "-p", upload_port,
            "-b", "921600",
            "-i",
        ],
        UPLOADCMD='sudo $UPLOADER download $UPLOADERFLAGS $SOURCE',
    )

    env.Replace(
        AR = join(gcc_path, "bin", "arm-none-eabi-ar"),
        AS = join(gcc_path, "bin", "arm-none-eabi-gcc"),
        CC = join(gcc_path, "bin", "arm-none-eabi-gcc"),
        CXX = join(gcc_path, "bin", "arm-none-eabi-g++"),
        GDB = join(gcc_path, "bin", "arm-none-eabi-gdb"),
        NM = join(gcc_path, "bin", "arm-none-eabi-gcc-nm"),
        LINK = join(gcc_path, "bin", "arm-none-eabi-gcc"),
        OBJCOPY = join(gcc_path, "bin", "arm-none-eabi-objcopy"),
        OBJDUMP = join(gcc_path, "bin", "arm-none-eabi-objdump"),
        RANLIB = join(gcc_path, "bin", "arm-none-eabi-gcc-ranlib"),
        SIZETOOL = join(gcc_path, "bin", "arm-none-eabi-size"),
    )
else:
    print("Unsupported operating system")
    exit(1)

env.Append(
    LDSCRIPT_PATH=join(FRAMEWORK_DIR, "ql_build", "fgm842d.ld"),
    ASFLAGS=[
        "-g",
        "-marm",
        "-mthumb-interwork",
        "-mcpu=arm968e-s",
        "-march=armv5te",
        "-x",
        "assembler-with-cpp"
    ],
    ASPPFLAGS=[
        "-g",
        "-marm",
        "-mthumb-interwork",
        "-mcpu=arm968e-s",
        "-march=armv5te",
        "-x",
        "assembler-with-cpp"
    ],
    CCFLAGS=[
        "-g",
        "-mthumb",
        "-mcpu=arm968e-s",
        "-march=armv5te",
        "-mthumb-interwork",
        "-mlittle-endian",
        "-Os",
        "-std=c99",
        "-ffunction-sections",
        "-Wall",
        "-Wno-implicit-function-declaration",
        "-Wno-format",
        "-Wno-unknown-pragmas",
        "-fsigned-char",
        "-fdata-sections",
        "-nostdlib",
        "-fno-strict-aliasing"
    ],
    CFLAGS = [
        "-g",
        "-mthumb",
        "-mcpu=arm968e-s",
        "-march=armv5te",
        "-mthumb-interwork",
        "-mlittle-endian",
        "-Os",
        "-std=c99",
        "-ffunction-sections",
        "-Wall",
        "-Wno-implicit-function-declaration",
        "-Wno-format",
        "-Wno-unknown-pragmas",
        "-fsigned-char",
        "-fdata-sections",
        "-nostdlib",
        "-fno-strict-aliasing"
    ],
    CXXFLAGS = [
        "-g",
        "-mthumb",
        "-mcpu=arm968e-s",
        "-march=armv5te",
        "-mthumb-interwork",
        "-mlittle-endian",
        "-Os",
        "-std=c99",
        "-ffunction-sections",
        "-Wall",
        "-Wno-implicit-function-declaration",
        "-Wno-format",
        "-Wno-unknown-pragmas",
        "-fsigned-char",
        "-fdata-sections",
        "-nostdlib",
        "-fno-strict-aliasing"
    ],
    CPPDEFINES = [
        ("CFG_OS_FREERTOS", 1),
        "BUILDING_LIBCURL",
        "QL_CSDK_SUPPORT",
        ("QL_CSDK_MODE", 1),
        "USE_MBEDTLS_2_27_0",
        "QL_PROJECT_FGM842D",
        ("MBEDTLS_CONFIG_FILE", r"\"tls_config.h\"")
    ],
    LINKFLAGS=[
        "-g",
        "-Wl,--gc-sections",
        "-marm",
        "-mcpu=arm968e-s",
        "-mthumb-interwork",
        "-nostdlib",
        "-Xlinker",
        "-Map=${TARGET}.map",
        "-Wl,-wrap,malloc",
        "-Wl,-wrap,_malloc_r",
        "-Wl,-wrap,free",
        "-Wl,-wrap,_free_r",
        "-Wl,-wrap,zalloc",
        "-Wl,-wrap,calloc",
        "-Wl,-wrap,realloc",
        "-Wl,-wrap,_realloc_r",
        "-Wl,-wrap,printf",
        "-Wl,-wrap,vsnprintf",
        "-Wl,-wrap,snprintf",
        "-Wl,-wrap,sprintf",
        "-Wl,-wrap,puts",
        "-Wl,-wrap,mbedtls_ssl_handshake_server_step",
        "-Wl,-wrap,mbedtls_ssl_handshake_client_step",
        "-Wl,-wrap,mbedtls_ssl_write_client_hello",
        "-Wl,-wrap,mbedtls_ssl_read",
        "-Wl,-wrap,mbedtls_ssl_write",
        "-Wl,-wrap,mbedtls_ssl_free",
        "-Wl,-wrap,mbedtls_ssl_session_reset",
        "-Wl,-wrap,mbedtls_ssl_setup",
        "-Wl,-wrap,mbedtls_ssl_send_alert_message",
        "-Wl,-wrap,mbedtls_ssl_close_notify"
    ],    
    CPPPATH=[
        join(FRAMEWORK_DIR, "ql_kernel"),
        join(FRAMEWORK_DIR, "ql_components"),
        join(FRAMEWORK_DIR, "ql_components", "func", "wpa_supplicant_2_9", "src", "utils"),
        join(FRAMEWORK_DIR, "ql_components", "func", "wpa_supplicant_2_9", "src", "ap"),
        join(FRAMEWORK_DIR, "ql_components", "func", "wpa_supplicant_2_9", "src", "common"),
        join(FRAMEWORK_DIR, "ql_components", "func", "wpa_supplicant_2_9", "src", "drivers"),
        join(FRAMEWORK_DIR, "ql_components", "func", "wpa_supplicant_2_9", "src", "wps"),
        join(FRAMEWORK_DIR, "ql_components", "func", "wpa_supplicant_2_9", "src"),
        join(FRAMEWORK_DIR, "ql_components", "func", "wpa_supplicant_2_9", "bk_patch"),
        join(FRAMEWORK_DIR, "ql_components", "func", "wpa_supplicant_2_9", "hostapd"),
        join(FRAMEWORK_DIR, "ql_components", "func", "force_sleep"),
        join(FRAMEWORK_DIR, "ql_components", "func", "bk_aware"),
        join(FRAMEWORK_DIR, "ql_components", "func", "uart_debug"),
        join(FRAMEWORK_DIR, "ql_components", "func", "easy_flash", "types", "struct2json", "inc"),
        join(FRAMEWORK_DIR, "ql_components", "func", "easy_flash", "types"),
        join(FRAMEWORK_DIR, "ql_components", "func", "easy_flash", "inc"),
        join(FRAMEWORK_DIR, "ql_components", "func", "easy_flash"),
        join(FRAMEWORK_DIR, "ql_components", "func", "sensor"),
        join(FRAMEWORK_DIR, "ql_components", "func", "ble_wifi_exchange"),
        join(FRAMEWORK_DIR, "ql_components", "func", "power_save"),
        join(FRAMEWORK_DIR, "ql_components", "func", "user_driver"),
        join(FRAMEWORK_DIR, "ql_components", "func", "video_transfer"),
        join(FRAMEWORK_DIR, "ql_components", "func", "spidma_intf"),
        join(FRAMEWORK_DIR, "ql_components", "func", "include"),
        join(FRAMEWORK_DIR, "ql_components", "func", "sim_uart"),
        join(FRAMEWORK_DIR, "ql_components", "func", "rwnx_intf"),
        join(FRAMEWORK_DIR, "ql_components", "func", "saradc_intf"),
        join(FRAMEWORK_DIR, "ql_components", "func", "camera_intf"),
        join(FRAMEWORK_DIR, "ql_components", "func", "utf8"),
        join(FRAMEWORK_DIR, "ql_components", "func", "ethernet_intf"),
        join(FRAMEWORK_DIR, "ql_components", "func", "misc"),
        join(FRAMEWORK_DIR, "ql_components", "func", "security"),
        join(FRAMEWORK_DIR, "ql_components", "func", "joint_up"),
        join(FRAMEWORK_DIR, "ql_components", "func", "base64"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "mac"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "lmac", "src", "chan"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "lmac", "src", "tpc"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "lmac", "src", "sta"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "lmac", "src", "p2p"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "lmac", "src", "bfr"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "lmac", "src", "scan"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "lmac", "src", "rd"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "lmac", "src", "rwnx"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "lmac", "src", "tdls"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "lmac", "src", "ps"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "lmac", "src", "mm"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "lmac", "src", "vif"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "lmac", "src", "hal"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "lmac", "src", "tx", "txl"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "lmac", "src", "tx"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "lmac", "src", "rx"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "lmac", "src", "rx", "rxl"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "lmac", "src", "td"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "common"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "umac", "src", "mfp"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "umac", "src", "me"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "umac", "src", "sm"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "umac", "src", "scanu"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "umac", "src", "rxu"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "umac", "src", "txu"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "umac", "src", "mesh"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "umac", "src", "llc"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "umac", "src", "ftm"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "umac", "src", "rc"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "umac", "src", "bam"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "umac", "src", "apm"),
        join(FRAMEWORK_DIR, "ql_components", "ip", "ke"),
        join(FRAMEWORK_DIR, "ql_components", "os", "FreeRTOSv9.0.0"),
        join(FRAMEWORK_DIR, "ql_components", "os", "include"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "rc_beken"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "calendar"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "dma"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "wdt"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "sys_ctrl"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "general_dma"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "ui"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "app", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "lan"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "lan", "lanc", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "lan", "lans", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "htp", "htpc", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "htp", "htpt", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "htp"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "dis", "disc", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "dis", "diss", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "uds"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "uds", "udsc", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "uds", "udss", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "pasp", "paspc", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "pasp"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "pasp", "pasps", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "bas", "basc", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "bas", "bass", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "bk_comm", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "cpp"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "cpp", "cpps", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "cpp", "cppc", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "blp", "blps", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "blp"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "blp", "blpc", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "tip", "tipc", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "tip", "tips", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "tip"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "prox", "proxm", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "prox", "proxr", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "wscp", "wscs", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "wscp", "wscc", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "wscp"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "rscp", "rscps", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "rscp", "rscpc", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "rscp"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "bk_sdp", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "hrp"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "hrp", "hrps", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "hrp", "hrpc", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "bcs", "bcsc", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "bcs"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "bcs", "bcss", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "find", "findl", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "find", "findt", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "cscp"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "cscp", "cscpc", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "cscp", "cscps", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "anp"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "anp", "anps", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "anp", "anpc", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "scpp", "scpps", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "scpp"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "scpp", "scppc", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "glp", "glpc", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "glp"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "glp", "glps", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "hogp", "hogprh", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "hogp", "hogpd", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "hogp"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_pub", "profiles", "hogp", "hogpbh", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "ip", "ble", "hl", "src", "inc"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "ip", "ble", "hl", "src", "l2cap"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "ip", "ble", "hl", "src", "gap", "gapc"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "ip", "ble", "hl", "src", "gap", "gapm"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "ip", "ble", "hl", "src", "gap"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "ip", "ble", "hl", "src", "gatt"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "ip", "ble", "hl", "inc"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "ip", "ble", "hl", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "ip", "ble", "iso", "data_path", "isoohci", "src"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "ip", "ble", "iso", "data_path", "isoohci", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "ip", "ble", "iso", "data_path"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "ip", "ble", "iso", "data_path", "isogen", "src"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "ip", "ble", "iso", "data_path", "isogen", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "ip", "ble", "ll", "src"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "ip", "ble", "ll", "src", "lli"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "ip", "ble", "ll", "src", "llc"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "ip", "ble", "ll", "src", "llm"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "ip", "ble", "ll", "src", "lld"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "ip", "ble", "ll", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "ip", "ble", "ll", "import", "reg"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "ip", "hci", "src"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "ip", "hci", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "ip", "ahi", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "ip", "sch", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "ip", "sch", "import"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "ip", "em", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "modules", "aes", "src"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "modules", "aes", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "modules", "dbg", "src"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "modules", "dbg", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "modules", "ecc_p256", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "modules", "common", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "modules", "rwip", "src"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "modules", "rwip", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "modules", "rwip", "import", "reg"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "modules", "ke", "src"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "modules", "ke", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "ble_lib", "modules", "h4tl", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "arch", "armv5"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "arch", "armv5", "compiler"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "arch", "armv5", "ll"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "platform", "7238", "nvds", "api"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "platform", "7238", "entry"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "platform", "7238", "config"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "platform", "7238", "driver", "reg"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "platform", "7238", "driver", "rf"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "ble", "platform", "7238", "driver", "uart"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "icu"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "spi"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "fft"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "entry"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "i2c"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "pwm"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "macphy_bypass"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "gpio"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "saradc"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "common"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "common", "reg"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "i2s"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "include"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "uart"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "qspi"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "jpeg"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "phy"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "spidma"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "usb", "src", "drivers", "compl"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "usb", "src", "drivers", "hid"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "usb", "src", "drivers", "hub"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "usb", "src", "drivers", "msd"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "usb", "src", "drivers", "comm"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "usb", "src", "drivers", "trans"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "usb", "src", "test", "compl"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "usb", "src", "test"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "usb", "src", "test", "hub"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "usb", "src", "test", "cbs"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "usb", "src", "hid"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "usb", "src", "examples"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "usb", "src", "uvc"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "usb", "src", "cd"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "usb", "src", "systems", "none", "afs"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "usb", "src", "systems", "none"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "usb", "src", "msc"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "usb"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "usb", "include"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "usb", "include", "class"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "intc"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "security"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "flash"),
        join(FRAMEWORK_DIR, "ql_components", "driver", "rw_pub"),
        join(FRAMEWORK_DIR, "ql_components", "api"),
        join(FRAMEWORK_DIR, "ql_components", "release"),
        join(FRAMEWORK_DIR, "ql_components", "common"),
        join(FRAMEWORK_DIR, "ql_components", "app", "config"),
        join(FRAMEWORK_DIR, "ql_components", "app", "standalone-station"),
        join(FRAMEWORK_DIR, "ql_components", "app", "standalone-ap"),
        join(FRAMEWORK_DIR, "ql_kernel", "config"),
        join(FRAMEWORK_DIR, "ql_kernel", "FreeRTOSv9.0.0", "FreeRTOS", "Source"),
        join(FRAMEWORK_DIR, "ql_kernel", "FreeRTOSv9.0.0", "FreeRTOS", "Source", "include"),
        join(FRAMEWORK_DIR, "ql_kernel", "FreeRTOSv9.0.0", "FreeRTOS", "Source", "portable", "Keil", "ARM968es"),
        join(FRAMEWORK_DIR, "ql_components", "third_party", "paho-mqtt", "client", "src"),
        join(FRAMEWORK_DIR, "ql_components", "third_party", "paho-mqtt", "packet", "src"),
        join(FRAMEWORK_DIR, "ql_components", "third_party", "paho-mqtt", "mqtt_ui", "ssl_mqtt"),
        join(FRAMEWORK_DIR, "ql_components", "third_party", "paho-mqtt", "mqtt_ui", "tcp_mqtt"),
        join(FRAMEWORK_DIR, "ql_components", "third_party", "paho-mqtt", "mqtt_ui"),
        join(FRAMEWORK_DIR, "ql_components", "third_party", "mbedtls", "mbedtls", "include"),
        join(FRAMEWORK_DIR, "ql_components", "third_party", "mbedtls", "mbedtls", "include", "mbedtls"),
        join(FRAMEWORK_DIR, "ql_components", "third_party", "mbedtls", "mbedtls-port", "inc"),
        join(FRAMEWORK_DIR, "ql_components", "third_party", "mbedtls", "mbedtls_ui"),
        join(FRAMEWORK_DIR, "ql_components", "third_party", "lwip_intf", "lwip-2.0.2", "port"),
        join(FRAMEWORK_DIR, "ql_components", "third_party", "lwip_intf", "lwip-2.0.2", "src", "include"),
        join(FRAMEWORK_DIR, "ql_components", "third_party", "lwip_intf", "lwip-2.0.2", "src", "include", "lwip"),
        join(FRAMEWORK_DIR, "ql_components", "third_party", "lwip_intf", "lwip-2.0.2", "src", "include", "lwip", "prot"),
        join(FRAMEWORK_DIR, "ql_components", "third_party", "lwip_intf", "lwip-2.0.2", "src", "include", "posix"),
        join(FRAMEWORK_DIR, "ql_components", "third_party", "lwip_intf", "lwip-2.0.2", "src", "include", "netif"),
        join(FRAMEWORK_DIR, "ql_application"),
        join(FRAMEWORK_DIR, "ql_application", "third_party", "mdns", "private_include"),
        join(FRAMEWORK_DIR, "ql_application", "third_party", "mdns", "include"),
        join(FRAMEWORK_DIR, "ql_application", "third_party", "lfs"),
        join(FRAMEWORK_DIR, "ql_application", "third_party", "5500"),
        join(FRAMEWORK_DIR, "ql_application", "third_party", "5500", "w5500"),
        join(FRAMEWORK_DIR, "ql_application", "third_party", "http-parser"),
        join(FRAMEWORK_DIR, "ql_application", "third_party", "curl", "curl-8.1.2", "include"),
        join(FRAMEWORK_DIR, "ql_application", "third_party", "curl", "curl-8.1.2", "include", "curl"),
        join(FRAMEWORK_DIR, "ql_application", "third_party", "curl", "curl-8.1.2", "lib", "vauth"),
        join(FRAMEWORK_DIR, "ql_application", "third_party", "curl", "curl-8.1.2", "lib", "vquic"),
        join(FRAMEWORK_DIR, "ql_application", "third_party", "curl", "curl-8.1.2", "lib", "vssh"),
        join(FRAMEWORK_DIR, "ql_application", "third_party", "curl", "curl-8.1.2", "lib", "vtls"),
        join(FRAMEWORK_DIR, "ql_application", "third_party", "curl", "curl-8.1.2", "lib")
    ],
    
    LIBPATH=[
        join(FRAMEWORK_DIR, "ql_kernel", "prebuilds")
    ],
    LIBS=[
        "libairkiss",
        "libcal",
        "libos",
        "librwnx",
        "libuart_debug",
        "libbk_aware",
        "libdriver",
        "libql_adapt",
        "libsensor",
        "libusb",
        "libble",
        "libfunc",
        "librf_test",
        "libsrc_s",
        "libwolfssl",
        "libble_pub",
        "libmisc",
        "librf_use",
        "libsupplicant",
        "libwpa"
    ],
    BUILDERS=dict(
        ElfToBin=Builder(
            action=env.VerboseAction(
                " ".join(["$OBJCOPY", "-O", "binary", "$SOURCES", "$TARGET"]),
                "Building $TARGET",
            ),
            suffix=".bin",
        ),
        GenFirmBin=Builder(
            action=env.VerboseAction(
                gen_firmware_bin, "Building " + join("$BUILD_DIR", "firmware_bin")
            ),
        ),
    ),
    upload_source = join(env["PROJECT_BUILD_DIR"], board.get('name'), "${PROGNAME}.bin"),
)

libs = [
    env.BuildLibrary(
        join("$BUILD_DIR", "ql_app"),
        join(FRAMEWORK_DIR, "ql_application"),
        [
            "+<ql_app_main.c>",
            "+<example/uart_demo/ql_uart_demo.c>",
            "+<example/wlan_demo/ql_wlan_demo.c>",
            "+<example/adc_demo/ql_adc_demo.c>",
            "+<example/lowpower_demo/ql_lowpower_demo.c>",
            "+<example/tls_demo/ql_tls_demo.c>",
            "+<example/ble_demo/ql_ble_demo.c>",
            "+<example/spi_flash_demo/ql_spi_flash_demo.c>",
            "+<example/http_demo/ql_http_demo.c>",
            "+<example/timer_demo/ql_timer_demo.c>",
            "+<example/spi_demo/ql_spi_demo.c>",
            "+<example/gpio_demo/ql_gpio_demo.c>",
            "+<example/watchdog_demo/ql_watchdog_demo.c>",
            "+<example/socket_demo/ql_socket_demo.c>",
            "+<example/osi_demo/ql_osi_demo.c>",
            "+<example/mqtt_demo/ql_mqtt_demo.c>",
            "+<example/pwm_demo/ql_pwm_demo.c>",
            "+<example/i2c_eeprom_demo/ql_i2c_eeprom_demo.c>",
            "+<example/ota_demo/ql_ota_demo.c>",
            "+<example/flash_demo/ql_flash_demo.c>",
            "+<example/wlan_config_network_demo/ql_wlan_config_network_demo.c>"
        ],
    ),
    env.BuildLibrary(
        join("$BUILD_DIR", "w5500"),
        join(FRAMEWORK_DIR, "ql_application", "third_party", "5500"),
        [
            "+<wizchip_ethnetif.c>",
            "+<wizchip_test.c>",
            "+<w5500/w5500.c>",
            "+<wizchip_port.c>",
            "+<wizchip_conf.c>"
        ],
    ),
    env.BuildLibrary(
        join("$BUILD_DIR", "curl"),
        join(FRAMEWORK_DIR, "ql_application", "third_party", "curl", "curl-8.1.2", "lib"),
        [
            "+<c-hyper.c>",
            "+<socketpair.c>",
            "+<curl_base64.c>",
            "+<curl_rtmp.c>",
            "+<cf-haproxy.c>",
            "+<http_aws_sigv4.c>",
            "+<curl_ntlm_wb.c>",
            "+<bufq.c>",
            "+<hostasyn.c>",
            "+<vtls/schannel_verify.c>",
            "+<vtls/sectransp.c>",
            "+<vtls/bearssl.c>",
            "+<vtls/gskit.c>",
            "+<vtls/mbedtls_threadlock.c>",
            "+<vtls/rustls.c>",
            "+<vtls/gtls.c>",
            "+<vtls/schannel.c>",
            "+<vtls/mbedtls.c>",
            "+<vtls/wolfssl.c>",
            "+<vtls/vtls.c>",
            "+<vtls/x509asn1.c>",
            "+<vtls/nss.c>",
            "+<vtls/keylog.c>",
            "+<vtls/hostcheck.c>",
            "+<vtls/openssl.c>",
            "+<rename.c>",
            "+<strdup.c>",
            "+<curl_md5.c>",
            "+<cf-socket.c>",
            "+<strerror.c>",
            "+<dict.c>",
            "+<cf-h1-proxy.c>",
            "+<url.c>",
            "+<escape.c>",
            "+<setopt.c>",
            "+<speedcheck.c>",
            "+<socks.c>",
            "+<parsedate.c>",
            "+<strtoofft.c>",
            "+<doh.c>",
            "+<curl_path.c>",
            "+<connect.c>",
            "+<mprintf.c>",
            "+<easy.c>",
            "+<version_win32.c>",
            "+<llist.c>",
            "+<hostip.c>",
            "+<telnet.c>",
            "+<asyn-thread.c>",
            "+<gopher.c>",
            "+<netrc.c>",
            "+<rand.c>",
            "+<mime.c>",
            "+<transfer.c>",
            "+<http_ntlm.c>",
            "+<dynhds.c>",
            "+<content_encoding.c>",
            "+<amigaos.c>",
            "+<http2.c>",
            "+<altsvc.c>",
            "+<fopen.c>",
            "+<vauth/krb5_sspi.c>",
            "+<vauth/cram.c>",
            "+<vauth/oauth2.c>",
            "+<vauth/spnego_gssapi.c>",
            "+<vauth/vauth.c>",
            "+<vauth/spnego_sspi.c>",
            "+<vauth/digest.c>",
            "+<vauth/cleartext.c>",
            "+<vauth/gsasl.c>",
            "+<vauth/krb5_gssapi.c>",
            "+<vauth/ntlm_sspi.c>",
            "+<vauth/ntlm.c>",
            "+<vauth/digest_sspi.c>",
            "+<system_win32.c>",
            "+<http1.c>",
            "+<http.c>",
            "+<easyoptions.c>",
            "+<tftp.c>",
            "+<smb.c>",
            "+<progress.c>",
            "+<curl_ntlm_core.c>",
            "+<nonblock.c>",
            "+<ldap.c>",
            "+<curl_sspi.c>",
            "+<hostsyn.c>",
            "+<http_proxy.c>",
            "+<socks_sspi.c>",
            "+<rtsp.c>",
            "+<cfilters.c>",
            "+<splay.c>",
            "+<strcase.c>",
            "+<http_chunks.c>",
            "+<vssh/libssh2.c>",
            "+<vssh/libssh.c>",
            "+<vssh/wolfssh.c>",
            "+<hostip4.c>",
            "+<smtp.c>",
            "+<mqtt.c>",
            "+<ftp.c>",
            "+<curl_sha256.c>",
            "+<pop3.c>",
            "+<psl.c>",
            "+<openldap.c>",
            "+<ws.c>",
            "+<select.c>",
            "+<timeval.c>",
            "+<getinfo.c>",
            "+<formdata.c>",
            "+<conncache.c>",
            "+<multi.c>",
            "+<curl_memrchr.c>",
            "+<curl_des.c>",
            "+<memdebug.c>",
            "+<asyn-ares.c>",
            "+<cf-h2-proxy.c>",
            "+<sendf.c>",
            "+<bufref.c>",
            "+<curl_endian.c>",
            "+<strtok.c>",
            "+<hmac.c>",
            "+<headers.c>",
            "+<krb5.c>",
            "+<curl_md4.c>",
            "+<dynbuf.c>",
            "+<curl_get_line.c>",
            "+<timediff.c>",
            "+<curl_fnmatch.c>",
            "+<curl_multibyte.c>",
            "+<pingpong.c>",
            "+<idn.c>",
            "+<slist.c>",
            "+<curl_log.c>",
            "+<easygetopt.c>",
            "+<cf-https-connect.c>",
            "+<urlapi.c>",
            "+<http_negotiate.c>",
            "+<fileinfo.c>",
            "+<hostip6.c>",
            "+<curl_threads.c>",
            "+<file.c>",
            "+<curl_sasl.c>",
            "+<curl_range.c>",
            "+<inet_pton.c>",
            "+<ftplistparser.c>",
            "+<cookie.c>",
            "+<curl_gssapi.c>",
            "+<noproxy.c>",
            "+<getenv.c>",
            "+<inet_ntop.c>",
            "+<http_digest.c>",
            "+<imap.c>",
            "+<socks_gssapi.c>",
            "+<warnless.c>",
            "+<hsts.c>",
            "+<curl_version.c>",
            "+<curl_addrinfo.c>",
            "+<if2ip.c>",
            "+<vquic/vquic.c>",
            "+<vquic/curl_quiche.c>",
            "+<vquic/curl_msh3.c>",
            "+<vquic/curl_ngtcp2.c>",
            "+<curl_gethostname.c>",
            "+<share.c>",
            "+<hash.c>"
        ],
    ),
    env.BuildLibrary(
        join("$BUILD_DIR", "http-parser"),
        join(FRAMEWORK_DIR, "ql_application", "third_party", "http-parser"),
        [
            "+<http_parser.c>"
        ],
    ),
    env.BuildLibrary(
        join("$BUILD_DIR", "lfs"),
        join(FRAMEWORK_DIR, "ql_application", "third_party", "lfs"),
        [
            "+<lfs.c>",
            "+<lfs_util.c>"
        ],
    ),
    env.BuildLibrary(
        join("$BUILD_DIR", "lwip"),
        join(FRAMEWORK_DIR, "ql_components", "third_party", "lwip_intf"),
        [
            "+<dhcpd/dhcp-server-main.c>",
            "+<dhcpd/dhcp-server.c>",
            "+<lwip-2.0.2/port/ethernetif.c>",
            "+<lwip-2.0.2/port/net.c>",
            "+<lwip-2.0.2/port/sys_arch.c>",
            "+<lwip-2.0.2/src/api/tcpip.c>",
            "+<lwip-2.0.2/src/api/api_lib.c>",
            "+<lwip-2.0.2/src/api/sockets.c>",
            "+<lwip-2.0.2/src/api/api_msg.c>",
            "+<lwip-2.0.2/src/api/netifapi.c>",
            "+<lwip-2.0.2/src/api/netdb.c>",
            "+<lwip-2.0.2/src/api/netbuf.c>",
            "+<lwip-2.0.2/src/api/err.c>",
            "+<lwip-2.0.2/src/core/inet_chksum.c>",
            "+<lwip-2.0.2/src/core/dns.c>",
            "+<lwip-2.0.2/src/core/tcp_in.c>",
            "+<lwip-2.0.2/src/core/pbuf.c>",
            "+<lwip-2.0.2/src/core/mem.c>",
            "+<lwip-2.0.2/src/core/timeouts.c>",
            "+<lwip-2.0.2/src/core/memp.c>",
            "+<lwip-2.0.2/src/core/ip.c>",
            "+<lwip-2.0.2/src/core/tcp_out.c>",
            "+<lwip-2.0.2/src/core/netif.c>",
            "+<lwip-2.0.2/src/core/ipv4/icmp.c>",
            "+<lwip-2.0.2/src/core/ipv4/ip4_frag.c>",
            "+<lwip-2.0.2/src/core/ipv4/ip4_addr.c>",
            "+<lwip-2.0.2/src/core/ipv4/etharp.c>",
            "+<lwip-2.0.2/src/core/ipv4/igmp.c>",
            "+<lwip-2.0.2/src/core/ipv4/dhcp.c>",
            "+<lwip-2.0.2/src/core/ipv4/ip4.c>",
            "+<lwip-2.0.2/src/core/sys.c>",
            "+<lwip-2.0.2/src/core/def.c>",
            "+<lwip-2.0.2/src/core/udp.c>",
            "+<lwip-2.0.2/src/core/raw.c>",
            "+<lwip-2.0.2/src/core/init.c>",
            "+<lwip-2.0.2/src/core/stats.c>",
            "+<lwip-2.0.2/src/core/tcp.c>",
            "+<lwip-2.0.2/src/core/ipv6/ethip6.c>",
            "+<lwip-2.0.2/src/core/ipv6/inet6.c>",
            "+<lwip-2.0.2/src/core/ipv6/ip6_frag.c>",
            "+<lwip-2.0.2/src/core/ipv6/nd6.c>",
            "+<lwip-2.0.2/src/core/ipv6/dhcp6.c>",
            "+<lwip-2.0.2/src/core/ipv6/mld6.c>",
            "+<lwip-2.0.2/src/core/ipv6/icmp6.c>",
            "+<lwip-2.0.2/src/core/ipv6/ip6.c>",
            "+<lwip-2.0.2/src/core/ipv6/ip6_addr.c>",
            "+<lwip-2.0.2/src/netif/slipif.c>",
            "+<lwip-2.0.2/src/netif/lowpan6.c>",
            "+<lwip-2.0.2/src/netif/ethernet.c>",
            "+<lwip-2.0.2/src/netif/ethernetif.c>",
            "+<lwip-2.0.2/src/apps/ping/ping.c>",
            "+<lwip-2.0.2/src/apps/httpd/fs.c>",
            "+<lwip-2.0.2/src/apps/httpd/httpd.c>"
        ],
    ),
    env.BuildLibrary(
        join("$BUILD_DIR", "mbedtls"),
        join(FRAMEWORK_DIR, "ql_components", "third_party", "mbedtls"),
        [
            "+<mbedtls/library/x509write_crt.c>",
            "+<mbedtls/library/psa_crypto.c>",
            "+<mbedtls/library/nist_kw.c>",
            "+<mbedtls/library/ecdsa.c>",
            "+<mbedtls/library/pk_wrap.c>",
            "+<mbedtls/library/psa_crypto_se.c>",
            "+<mbedtls/library/entropy.c>",
            "+<mbedtls/library/x509_csr.c>",
            "+<mbedtls/library/ssl_tls.c>",
            "+<mbedtls/library/ecdh.c>",
            "+<mbedtls/library/camellia.c>",
            "+<mbedtls/library/poly1305.c>",
            "+<mbedtls/library/psa_crypto_hash.c>",
            "+<mbedtls/library/havege.c>",
            "+<mbedtls/library/error.c>",
            "+<mbedtls/library/entropy_poll.c>",
            "+<mbedtls/library/x509write_csr.c>",
            "+<mbedtls/library/x509_crt.c>",
            "+<mbedtls/library/md2.c>",
            "+<mbedtls/library/pk.c>",
            "+<mbedtls/library/rsa.c>",
            "+<mbedtls/library/psa_crypto_ecp.c>",
            "+<mbedtls/library/sha512.c>",
            "+<mbedtls/library/ecp_curves.c>",
            "+<mbedtls/library/ecjpake.c>",
            "+<mbedtls/library/arc4.c>",
            "+<mbedtls/library/mps_trace.c>",
            "+<mbedtls/library/asn1write.c>",
            "+<mbedtls/library/cipher.c>",
            "+<mbedtls/library/x509_crl.c>",
            "+<mbedtls/library/bignum.c>",
            "+<mbedtls/library/hmac_drbg.c>",
            "+<mbedtls/library/pkcs11.c>",
            "+<mbedtls/library/pkwrite.c>",
            "+<mbedtls/library/ssl_msg.c>",
            "+<mbedtls/library/aes.c>",
            "+<mbedtls/library/cipher_wrap.c>",
            "+<mbedtls/library/ctr_drbg.c>",
            "+<mbedtls/library/ssl_ticket.c>",
            "+<mbedtls/library/x509_create.c>",
            "+<mbedtls/library/base64.c>",
            "+<mbedtls/library/gcm.c>",
            "+<mbedtls/library/padlock.c>",
            "+<mbedtls/library/blowfish.c>",
            "+<mbedtls/library/psa_crypto_rsa.c>",
            "+<mbedtls/library/hkdf.c>",
            "+<mbedtls/library/ripemd160.c>",
            "+<mbedtls/library/psa_crypto_client.c>",
            "+<mbedtls/library/md4.c>",
            "+<mbedtls/library/version.c>",
            "+<mbedtls/library/net_sockets.c>",
            "+<mbedtls/library/timing.c>",
            "+<mbedtls/library/psa_crypto_mac.c>",
            "+<mbedtls/library/md.c>",
            "+<mbedtls/library/pkcs5.c>",
            "+<mbedtls/library/platform.c>",
            "+<mbedtls/library/pkcs12.c>",
            "+<mbedtls/library/psa_crypto_cipher.c>",
            "+<mbedtls/library/pem.c>",
            "+<mbedtls/library/chacha20.c>",
            "+<mbedtls/library/md5.c>",
            "+<mbedtls/library/rsa_internal.c>",
            "+<mbedtls/library/memory_buffer_alloc.c>",
            "+<mbedtls/library/threading.c>",
            "+<mbedtls/library/chachapoly.c>",
            "+<mbedtls/library/psa_crypto_driver_wrappers.c>",
            "+<mbedtls/library/oid.c>",
            "+<mbedtls/library/ccm.c>",
            "+<mbedtls/library/aria.c>",
            "+<mbedtls/library/ssl_tls13_keys.c>",
            "+<mbedtls/library/ecp.c>",
            "+<mbedtls/library/ssl_cli.c>",
            "+<mbedtls/library/xtea.c>",
            "+<mbedtls/library/psa_crypto_aead.c>",
            "+<mbedtls/library/version_features.c>",
            "+<mbedtls/library/aesni.c>",
            "+<mbedtls/library/cmac.c>",
            "+<mbedtls/library/psa_its_file.c>",
            "+<mbedtls/library/ssl_srv.c>",
            "+<mbedtls/library/x509.c>",
            "+<mbedtls/library/des.c>",
            "+<mbedtls/library/mps_reader.c>",
            "+<mbedtls/library/certs.c>",
            "+<mbedtls/library/ssl_ciphersuites.c>",
            "+<mbedtls/library/asn1parse.c>",
            "+<mbedtls/library/psa_crypto_storage.c>",
            "+<mbedtls/library/psa_crypto_slot_management.c>",
            "+<mbedtls/library/sha256.c>",
            "+<mbedtls/library/platform_util.c>",
            "+<mbedtls/library/sha1.c>",
            "+<mbedtls/library/ssl_cache.c>",
            "+<mbedtls/library/dhm.c>",
            "+<mbedtls/library/pkparse.c>",
            "+<mbedtls/library/ssl_cookie.c>",
            "+<mbedtls/library/debug.c>",
            "+<mbedtls-port/src/esp_ssl_cli.c>",
            "+<mbedtls-port/src/tls_client.c>",
            "+<mbedtls-port/src/timing_alt.c>",
            "+<mbedtls-port/src/tls_certificate.c>",
            "+<mbedtls-port/src/esp_mbedtls_dynamic_impl.c>",
            "+<mbedtls-port/src/esp_ssl_srv.c>",
            "+<mbedtls-port/src/esp_ssl_tls.c>",
            "+<mbedtls-port/src/ecp_alt.c>",
            "+<mbedtls-port/src/tls_net.c>",
            "+<mbedtls-port/src/ecp_curves_alt.c>",
            "+<mbedtls-port/src/tls_hardware.c>",
            "+<mbedtls-port/src/tls_mem.c>",
            "+<mbedtls_ui/sl_tls.c>"
        ],
    ),
    env.BuildLibrary(
        join("$BUILD_DIR", "mqtt"),
        join(FRAMEWORK_DIR, "ql_components", "third_party", "paho-mqtt"),
        [
            "+<client/src/MQTTFreeRTOS.c>",
            "+<client/src/MQTTClient.c>",
            "+<packet/src/MQTTSerializePublish.c>",
            "+<packet/src/MQTTPacket.c>",
            "+<packet/src/MQTTSubscribeServer.c>",
            "+<packet/src/MQTTConnectClient.c>",
            "+<packet/src/MQTTFormat.c>",
            "+<packet/src/MQTTConnectServer.c>",
            "+<packet/src/MQTTUnsubscribeServer.c>",
            "+<packet/src/MQTTDeserializePublish.c>",
            "+<packet/src/MQTTSubscribeClient.c>",
            "+<packet/src/MQTTUnsubscribeClient.c>",
            "+<mqtt_ui/mqtt_client_com_port.c>",
            "+<mqtt_ui/tcp_mqtt/tcp_mqtt_client_port.c>",
            "+<mqtt_ui/mqtt_client_core.c>",
            "+<mqtt_ui/ssl_mqtt/ssl_mqtt_client_port.c>",
            "+<client/paho_mqtt_udp.c>"
        ],
    ),
]

env.Prepend(LIBS=libs)